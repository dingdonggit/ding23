// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now()) 
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId
  individuals Individual[]
  accounts Account[]
  listings Listing[]
  organizations Organization[]
  RFQ RFQ[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category String
  subCategory String?
  status String
  saleStatus String
  minRoom Int?
  maxRoom Int?
  minBathroom Int?
  maxBathroom Int?
  minLevel Int?
  maxLevel Int?
  unitCount Int?
  constStartDate DateTime? 
  constEndDate DateTime? 
  applicationDate DateTime?
  applicationApprovalDate DateTime?
  companyName String?
  companyCategory String?
  companySubCategory String?
  individualName String?
  individualCategory String?
  individualSubCategory String?
  locationValue String
  userId String @db.ObjectId
  minPrice Int?
  maxPrice Int?
  individualId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  individual Individual @relation(fields: [individualId], references: [id], onDelete: Cascade)
  organizations Organization[]
  RFQ RFQ[]
  
}

 


model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId  
  createdAt DateTime @default(now())
  companyCategory String
  companySubCategory String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model RFQ {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId  
  createdAt DateTime @default(now())
  companyCategory String
  companySubCategory String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}


model Individual {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 userId String @db.ObjectId
 category String
 collaboratorId String @db.ObjectId
 subCategory String?
 listingId String @db.ObjectId 
 status String
 email           String?   @unique
 emailVerified   DateTime?
 image           String?
 headerImage     String?
 hashedPassword  String?
 createdAt       DateTime @default(now()) 
 updatedAt       DateTime @updatedAt
 listings Listing[]

 user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 collaborator Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
}

model Collaborator {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  individuals Individual[]
}